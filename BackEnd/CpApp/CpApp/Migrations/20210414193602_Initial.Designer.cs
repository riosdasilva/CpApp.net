// <auto-generated />
using System;
using CpApp.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace CpApp.Migrations
{
    [DbContext(typeof(CpAppContext))]
    [Migration("20210414193602_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("CpApp.Models.CreditCard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Number")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Type")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("Validity")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("CreditCard");
                });

            modelBuilder.Entity("CpApp.Models.Review", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<float>("Rating")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("Review");
                });

            modelBuilder.Entity("CpApp.Models.Seat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Date")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.Property<int?>("StopId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StopId");

                    b.ToTable("Seat");
                });

            modelBuilder.Entity("CpApp.Models.Station", b =>
                {
                    b.Property<int>("StationNumber")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("StationNumber");

                    b.ToTable("Station");
                });

            modelBuilder.Entity("CpApp.Models.Stop", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CurrentStationId")
                        .HasColumnType("int");

                    b.Property<int>("NextStationId")
                        .HasColumnType("int");

                    b.Property<int>("SeatsToNextStop")
                        .HasColumnType("int");

                    b.Property<string>("StopTime")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("CurrentStationId");

                    b.HasIndex("NextStationId");

                    b.ToTable("Stop");
                });

            modelBuilder.Entity("CpApp.Models.Ticket", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("ClientId")
                        .HasColumnType("int");

                    b.Property<string>("Date")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int?>("InspectorId")
                        .HasColumnType("int");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.Property<string>("Time")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("Used")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("InspectorId");

                    b.ToTable("Ticket");
                });

            modelBuilder.Entity("CpApp.Models.Trip", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("FinalStationId")
                        .HasColumnType("int");

                    b.Property<string>("FinalTime")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("InitialStationId")
                        .HasColumnType("int");

                    b.Property<string>("InitialTime")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("FinalStationId");

                    b.HasIndex("InitialStationId");

                    b.ToTable("Trip");
                });

            modelBuilder.Entity("CpApp.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Birthday")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.Property<string>("Nationaly")
                        .IsRequired()
                        .HasColumnType("varchar(30) CHARACTER SET utf8mb4")
                        .HasMaxLength(30);

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("User");

                    b.HasDiscriminator<string>("Discriminator").HasValue("User");
                });

            modelBuilder.Entity("CpApp.Models.Client", b =>
                {
                    b.HasBaseType("CpApp.Models.User");

                    b.HasDiscriminator().HasValue("Client");
                });

            modelBuilder.Entity("CpApp.Models.Inspector", b =>
                {
                    b.HasBaseType("CpApp.Models.User");

                    b.HasDiscriminator().HasValue("Inspector");
                });

            modelBuilder.Entity("CpApp.Models.CreditCard", b =>
                {
                    b.HasOne("CpApp.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("CpApp.Models.Seat", b =>
                {
                    b.HasOne("CpApp.Models.Stop", "Stop")
                        .WithMany("Seats")
                        .HasForeignKey("StopId");
                });

            modelBuilder.Entity("CpApp.Models.Stop", b =>
                {
                    b.HasOne("CpApp.Models.Station", "CurrentStation")
                        .WithMany("StopsC")
                        .HasForeignKey("CurrentStationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CpApp.Models.Station", "NextStation")
                        .WithMany("StopsF")
                        .HasForeignKey("NextStationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("CpApp.Models.Ticket", b =>
                {
                    b.HasOne("CpApp.Models.Client", "Client")
                        .WithMany("Tickets")
                        .HasForeignKey("ClientId");

                    b.HasOne("CpApp.Models.Inspector", "Inspector")
                        .WithMany("Tickets")
                        .HasForeignKey("InspectorId");
                });

            modelBuilder.Entity("CpApp.Models.Trip", b =>
                {
                    b.HasOne("CpApp.Models.Station", "FinalStation")
                        .WithMany("TripsF")
                        .HasForeignKey("FinalStationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CpApp.Models.Station", "InitialStation")
                        .WithMany("TripsI")
                        .HasForeignKey("InitialStationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
